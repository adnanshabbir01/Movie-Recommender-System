# Movie-Recommender-System
import numpy as np
import pandas as pd
import ast

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies = movies.merge(credits, on='title')

movies.sample(4)

# We will include the following columns
# genres
# id (for fetching posters)
# keywords
# overview
# title
# cast
# crew

movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']] 

# Checking whether there are null and duplicate values
movies.isnull().sum()

movies.dropna(inplace=True)

movies

# Now we will correct the format of columns (Genres, Keywords, Cast and Crew)

movies.iloc[0].genres

movies.iloc[0].keywords

movies.iloc[0].cast

movies.iloc[0].crew

# '[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]'
# Converting this into format ['Action','Adventure','Fantasy','Science Fiction']

# First we will convert string of list into a list for that we will use 

def convert(obj):
    name = []
    for i in ast.literal_eval(obj):
        name.append(i['name'])
    return name

movies['keywords'] = movies['keywords'].apply(convert)

movies['genres'] = movies['genres'].apply(convert)

movies 

movies['cast'][0]

def convert3(obj):
    names = []
    counter = 0
    for i in ast.literal_eval(obj):
        if counter != 3:
            names.append(i['name'])
            counter += 1
        else:
            break
    return names

movies['cast'] = movies['cast'].apply(convert3)

movies['crew'][0]

def fetch_director(obj):
    name = []
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
            name.append(i['name'])
    return name 

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head()

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew'] 

new_df = movies[['movie_id','title','tags']]

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df['tags'] = new_df['tags'].apply(lambda x: x.lower())

!pip install nltk

from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

def stem_text(text):
    stemmed_text = [stemmer.stem(word) for word in text.split()]
    return ' '.join(stemmed_text)

new_df['tags'] = new_df['tags'].apply(stem_text)

new_df

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000, stop_words='english')

vectors = cv.fit_transform(new_df['tags']).toarray()

cv.get_feature_names_out()

cv.get_feature_names()

from sklearn.metrics.pairwise import cosine_similarity 

similarity = cosine_similarity(vectors)

def recommend(movie):
    movie_index = new_df[new_df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
    for i in movies_list:
        index = i[0]
        recommended_movie = new_df.iloc[index].title
        print(recommended_movie)

recommend('Spectre')
